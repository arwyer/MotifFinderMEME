# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport
import time


class MotifUtils(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login',
            service_ver='dev',
            async_job_check_time_ms=100, async_job_check_time_scale_percent=150, 
            async_job_check_max_time_ms=300000):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = service_ver
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc,
            async_job_check_time_ms=async_job_check_time_ms,
            async_job_check_time_scale_percent=async_job_check_time_scale_percent,
            async_job_check_max_time_ms=async_job_check_max_time_ms)

    def _check_job(self, job_id):
        return self._client._check_job('MotifUtils', job_id)

    def _UploadFromGibbs_submit(self, params, context=None):
        return self._client._submit_job(
             'MotifUtils.UploadFromGibbs', [params],
             self._service_ver, context)

    def UploadFromGibbs(self, params, context=None):
        """
        :param params: instance of type "UploadMEMEInParams" -> structure:
           parameter "path" of String, parameter "ws_name" of String,
           parameter "obj_name" of String
        :returns: instance of type "UploadOutput" -> structure: parameter
           "obj_ref" of String
        """
        job_id = self._UploadFromGibbs_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _UploadFromHomer_submit(self, params, context=None):
        return self._client._submit_job(
             'MotifUtils.UploadFromHomer', [params],
             self._service_ver, context)

    def UploadFromHomer(self, params, context=None):
        """
        :param params: instance of type "UploadHomerInParams" -> structure:
           parameter "path" of String, parameter "ws_name" of String,
           parameter "obj_name" of String, parameter "location_path" of String
        :returns: instance of type "UploadOutput" -> structure: parameter
           "obj_ref" of String
        """
        job_id = self._UploadFromHomer_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _UploadFromMEME_submit(self, params, context=None):
        return self._client._submit_job(
             'MotifUtils.UploadFromMEME', [params],
             self._service_ver, context)

    def UploadFromMEME(self, params, context=None):
        """
        :param params: instance of type "UploadGibbsInParams" -> structure:
           parameter "path" of String, parameter "ws_name" of String,
           parameter "obj_name" of String
        :returns: instance of type "UploadOutput" -> structure: parameter
           "obj_ref" of String
        """
        job_id = self._UploadFromMEME_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _UploadFromJASPAR_submit(self, params, context=None):
        return self._client._submit_job(
             'MotifUtils.UploadFromJASPAR', [params],
             self._service_ver, context)

    def UploadFromJASPAR(self, params, context=None):
        """
        :param params: instance of type "UploadJASPARInParams" -> structure:
           parameter "path" of String, parameter "ws_name" of String,
           parameter "obj_name" of String
        :returns: instance of type "UploadOutput" -> structure: parameter
           "obj_ref" of String
        """
        job_id = self._UploadFromJASPAR_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _UploadFromTRANSFAC_submit(self, params, context=None):
        return self._client._submit_job(
             'MotifUtils.UploadFromTRANSFAC', [params],
             self._service_ver, context)

    def UploadFromTRANSFAC(self, params, context=None):
        """
        :param params: instance of type "UploadTRANSFACInParams" ->
           structure: parameter "path" of String, parameter "ws_name" of
           String, parameter "obj_name" of String
        :returns: instance of type "UploadOutput" -> structure: parameter
           "obj_ref" of String
        """
        job_id = self._UploadFromTRANSFAC_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _DownloadMotifSet_submit(self, params, context=None):
        return self._client._submit_job(
             'MotifUtils.DownloadMotifSet', [params],
             self._service_ver, context)

    def DownloadMotifSet(self, params, context=None):
        """
        :param params: instance of type "DownloadParams" -> structure:
           parameter "ws_name" of String, parameter "source_ref" of String,
           parameter "format" of String
        :returns: instance of type "DownloadOutput" -> structure: parameter
           "destination_dir" of String
        """
        job_id = self._DownloadMotifSet_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _importFromNarrative_submit(self, params, context=None):
        return self._client._submit_job(
             'MotifUtils.importFromNarrative', [params],
             self._service_ver, context)

    def importFromNarrative(self, params, context=None):
        """
        :param params: instance of type "ImportNarrativeInParams" ->
           structure: parameter "ws_name" of String, parameter "staging_path"
           of String, parameter "local_path" of String, parameter "shock_id"
           of String, parameter "format" of String, parameter "obj_name" of
           String
        :returns: instance of type "ImportNarrativeOutParams" -> structure:
           parameter "obj_ref" of String
        """
        job_id = self._importFromNarrative_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def status(self, context=None):
        job_id = self._client._submit_job('MotifUtils.status', 
            [], self._service_ver, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]
