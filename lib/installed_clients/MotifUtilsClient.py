# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class MotifUtils(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login',
            service_ver='dev',
            async_job_check_time_ms=100, async_job_check_time_scale_percent=150, 
            async_job_check_max_time_ms=300000):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = service_ver
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc,
            async_job_check_time_ms=async_job_check_time_ms,
            async_job_check_time_scale_percent=async_job_check_time_scale_percent,
            async_job_check_max_time_ms=async_job_check_max_time_ms)

    def uploadMotifSet(self, params, context=None):
        """
        :param params: instance of type "uploadParams" -> structure:
           parameter "format" of type "motif_format" (Input/Output motif
           format @range("MEME", "JASPAR", "GIBBS", "HOMER", "TRANSFAC",
           "MFMD")), parameter "path" of String, parameter "obj_name" of
           String, parameter "ws_name" of type "workspace_name" (workspace
           name of the object)
        :returns: instance of type "UIOutParams" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String,
           parameter "motif_obj" of type "MotifSetRef" (Ref to a sequence set
           @id ws KBaseGeneRegulation.MotifSet)
        """
        return self._client.run_job('MotifUtils.uploadMotifSet',
                                    [params], self._service_ver, context)

    def parseMotifSet(self, params, context=None):
        """
        :param params: instance of type "parseParams" -> structure: parameter
           "format" of type "motif_format" (Input/Output motif format
           @range("MEME", "JASPAR", "GIBBS", "HOMER", "TRANSFAC", "MFMD")),
           parameter "file" of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String, parameter "ftp_url" of
           String, parameter "ws_name" of type "workspace_name" (workspace
           name of the object), parameter "genome" of type "GenomeRef" (Ref
           to a sequence set @id ws KBaseGenomes.Genome)
        :returns: instance of type "MotifSet" (Condition - description of
           conditionused to select sequences SequenceSet_ref - reference to
           sequenceset used to find motifs Motifs - list of motifs Alphabet -
           list of letters used in sequences, e.g. ['A','C','G','T'] for DNA
           Background - background frequencies of letters in alphabet) ->
           structure: parameter "Condition" of String, parameter
           "SequenceSet_ref" of String, parameter "Motifs" of list of type
           "Motif" (one of PWM or PFM must be included PWM - position weight
           matrix of motif PFM - position frequency matrix of motif
           Iupac_signature - motif represented in Iupac notation
           Motif_Locations - list of locations where motif has been found) ->
           structure: parameter "PWM" of mapping from String to list of
           Double, parameter "PFM" of mapping from String to list of Double,
           parameter "Iupac_sequence" of String, parameter "Motif_Locations"
           of list of type "Motif_Location" (sequence_id - id of sequence
           motif was found in associated sequenceset start - start of motif
           in the sequence end - end of motif in the sequence orientation -
           +/- sequence - actual motif sequence, might not match exactly to
           IUPAC) -> structure: parameter "sequence_id" of String, parameter
           "start" of Long, parameter "end" of Long, parameter "orientation"
           of String, parameter "sequence" of String, parameter "Alphabet" of
           list of String, parameter "Background" of mapping from String to
           Double
        """
        return self._client.run_job('MotifUtils.parseMotifSet',
                                    [params], self._service_ver, context)

    def saveMotifSet(self, params, context=None):
        """
        :param params: instance of type "saveParams" -> structure: parameter
           "format" of type "motif_format" (Input/Output motif format
           @range("MEME", "JASPAR", "GIBBS", "HOMER", "TRANSFAC", "MFMD")),
           parameter "file" of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String, parameter "ftp_url" of
           String, parameter "obj_name" of String, parameter "ws_name" of
           type "workspace_name" (workspace name of the object)
        :returns: instance of type "MotifSetRef" (Ref to a sequence set @id
           ws KBaseGeneRegulation.MotifSet)
        """
        return self._client.run_job('MotifUtils.saveMotifSet',
                                    [params], self._service_ver, context)

    def downloadMotifSet(self, params, context=None):
        """
        :param params: instance of type "downloadParams" -> structure:
           parameter "format" of type "motif_format" (Input/Output motif
           format @range("MEME", "JASPAR", "GIBBS", "HOMER", "TRANSFAC",
           "MFMD")), parameter "motifset" of type "MotifSetRef" (Ref to a
           sequence set @id ws KBaseGeneRegulation.MotifSet), parameter
           "ws_name" of type "workspace_name" (workspace name of the object)
        :returns: instance of type "UIOutParams" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String,
           parameter "motif_obj" of type "MotifSetRef" (Ref to a sequence set
           @id ws KBaseGeneRegulation.MotifSet)
        """
        return self._client.run_job('MotifUtils.downloadMotifSet',
                                    [params], self._service_ver, context)

    def UploadFromGibbs(self, params, context=None):
        """
        :param params: instance of type "UploadMEMEInParams" (Backwards
           compatability) -> structure: parameter "path" of String, parameter
           "ws_name" of String, parameter "obj_name" of String, parameter
           "absolute_locations" of mapping from String to String
        :returns: instance of type "UIOutParams" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String,
           parameter "motif_obj" of type "MotifSetRef" (Ref to a sequence set
           @id ws KBaseGeneRegulation.MotifSet)
        """
        return self._client.run_job('MotifUtils.UploadFromGibbs',
                                    [params], self._service_ver, context)

    def UploadFromHomer(self, params, context=None):
        """
        :param params: instance of type "UploadHomerInParams" -> structure:
           parameter "path" of String, parameter "ws_name" of String,
           parameter "obj_name" of String, parameter "location_path" of String
        :returns: instance of type "UIOutParams" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String,
           parameter "motif_obj" of type "MotifSetRef" (Ref to a sequence set
           @id ws KBaseGeneRegulation.MotifSet)
        """
        return self._client.run_job('MotifUtils.UploadFromHomer',
                                    [params], self._service_ver, context)

    def UploadFromMEME(self, params, context=None):
        """
        :param params: instance of type "UploadGibbsInParams" -> structure:
           parameter "path" of String, parameter "ws_name" of String,
           parameter "obj_name" of String
        :returns: instance of type "UIOutParams" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String,
           parameter "motif_obj" of type "MotifSetRef" (Ref to a sequence set
           @id ws KBaseGeneRegulation.MotifSet)
        """
        return self._client.run_job('MotifUtils.UploadFromMEME',
                                    [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.run_job('MotifUtils.status',
                                    [], self._service_ver, context)
